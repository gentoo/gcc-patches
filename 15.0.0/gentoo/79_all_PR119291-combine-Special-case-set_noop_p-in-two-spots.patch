https://inbox.sourceware.org/gcc-patches/Z+aF8pEePd6K5xKf@tucnak/

From fd39f47728c4e81e75c7150199fa368646cde9c3 Mon Sep 17 00:00:00 2001
Message-ID: <fd39f47728c4e81e75c7150199fa368646cde9c3.1743258660.git.sam@gentoo.org>
In-Reply-To: <8db4ff073981a554ab5b77f958fa4a333b981b30.1743258660.git.sam@gentoo.org>
References: <8db4ff073981a554ab5b77f958fa4a333b981b30.1743258660.git.sam@gentoo.org>
From: Jakub Jelinek <jakub@redhat.com>
Date: Fri, 28 Mar 2025 12:20:18 +0100
Subject: [PATCH 2/2] combine: Special case set_noop_p in two spots

Hi!

Here is the incremental patch I was talking about.
For noop sets, we don't need to test much, they can go to i2
unless that would violate i3 JUMP condition.

With this the try_combine on the pr119291.c testcase doesn't fail,
but succeeds and we get
(insn 22 21 23 4 (set (pc)
        (pc)) "pr119291.c":27:15 2147483647 {NOOP_MOVE}
     (nil))
(insn 23 22 24 4 (set (reg/v:SI 117 [ e ])
        (reg/v:SI 116 [ e ])) 96 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 116 [ e ])
        (nil)))
(note 24 23 25 4 NOTE_INSN_DELETED)
(insn 25 24 26 4 (set (reg/v:SI 116 [ e ])
        (const_int 0 [0])) "pr119291.c":28:13 96 {*movsi_internal}
     (nil))
(note 26 25 27 4 NOTE_INSN_DELETED)
(insn 27 26 28 4 (set (reg:DI 128 [ _9 ])
        (const_int 0 [0])) "pr119291.c":28:13 95 {*movdi_internal}
     (nil))
after it.

Ok for trunk if this passes bootstrap/regtest?

2025-03-28  Jakub Jelinek  <jakub@redhat.com>

	* combine.cc (try_combine): Sets which satisfy set_noop_p can go
	to i2 unless i3 is a jump and the other set is not.
---
 gcc/combine.cc | 30 ++++++++++++++++--------------
 1 file changed, 16 insertions(+), 14 deletions(-)

diff --git a/gcc/combine.cc b/gcc/combine.cc
index e87a9f272f1a..2be563bb018c 100644
--- a/gcc/combine.cc
+++ b/gcc/combine.cc
@@ -4017,13 +4017,14 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,
 	 in i3, so we need to make sure that we won't wrongly hoist a SET
 	 to i2 that would conflict with a death note present in there, or
 	 would have its dest modified or used between i2 and i3.  */
-      if (!modified_between_p (SET_SRC (set1), i2, i3)
-	  && !(REG_P (SET_DEST (set1))
-	       && find_reg_note (i2, REG_DEAD, SET_DEST (set1)))
-	  && !(GET_CODE (SET_DEST (set1)) == SUBREG
-	       && find_reg_note (i2, REG_DEAD,
-				 SUBREG_REG (SET_DEST (set1))))
-	  && !reg_used_between_p (SET_DEST (set1), i2, i3)
+      if ((set_noop_p (set1)
+	   || (!modified_between_p (SET_SRC (set1), i2, i3)
+	       && !(REG_P (SET_DEST (set1))
+		    && find_reg_note (i2, REG_DEAD, SET_DEST (set1)))
+	       && !(GET_CODE (SET_DEST (set1)) == SUBREG
+		    && find_reg_note (i2, REG_DEAD,
+				      SUBREG_REG (SET_DEST (set1))))
+	       && !reg_used_between_p (SET_DEST (set1), i2, i3)))
 	  /* If I3 is a jump, ensure that set0 is a jump so that
 	     we do not create invalid RTL.  */
 	  && (!JUMP_P (i3) || SET_DEST (set0) == pc_rtx)
@@ -4032,13 +4033,14 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,
 	  newi2pat = set1;
 	  newpat = set0;
 	}
-      else if (!modified_between_p (SET_SRC (set0), i2, i3)
-	       && !(REG_P (SET_DEST (set0))
-		    && find_reg_note (i2, REG_DEAD, SET_DEST (set0)))
-	       && !(GET_CODE (SET_DEST (set0)) == SUBREG
-		    && find_reg_note (i2, REG_DEAD,
-				      SUBREG_REG (SET_DEST (set0))))
-	       && !reg_used_between_p (SET_DEST (set0), i2, i3)
+      else if ((set_noop_p (set0)
+		|| (!modified_between_p (SET_SRC (set0), i2, i3)
+		    && !(REG_P (SET_DEST (set0))
+			 && find_reg_note (i2, REG_DEAD, SET_DEST (set0)))
+		    && !(GET_CODE (SET_DEST (set0)) == SUBREG
+			 && find_reg_note (i2, REG_DEAD,
+					   SUBREG_REG (SET_DEST (set0))))
+		    && !reg_used_between_p (SET_DEST (set0), i2, i3)))
 	       /* If I3 is a jump, ensure that set1 is a jump so that
 		  we do not create invalid RTL.  */
 	       && (!JUMP_P (i3) || SET_DEST (set1) == pc_rtx)
-- 
2.49.0

